# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Lesson {
  id: ID!
  title: String
  course: Course
  content: Lesson_content_Document
  videoUrl: String
  order: Int
}

type Lesson_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input LessonWhereUniqueInput {
  id: ID
}

input LessonWhereInput {
  AND: [LessonWhereInput!]
  OR: [LessonWhereInput!]
  NOT: [LessonWhereInput!]
  id: IDFilter
  title: StringFilter
  course: CourseWhereInput
  videoUrl: StringFilter
  order: IntNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input LessonOrderByInput {
  id: OrderDirection
  title: OrderDirection
  videoUrl: OrderDirection
  order: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input LessonUpdateInput {
  title: String
  course: CourseRelateToOneForUpdateInput
  content: JSON
  videoUrl: String
  order: Int
}

input CourseRelateToOneForUpdateInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
  disconnect: Boolean
}

input LessonUpdateArgs {
  where: LessonWhereUniqueInput!
  data: LessonUpdateInput!
}

input LessonCreateInput {
  title: String
  course: CourseRelateToOneForCreateInput
  content: JSON
  videoUrl: String
  order: Int
}

input CourseRelateToOneForCreateInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
}

type Review {
  id: ID!
  course: Course
  reviewerName: String
  rating: Int
  comment: String
  createdAt: DateTime
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ReviewWhereUniqueInput {
  id: ID
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  id: IDFilter
  course: CourseWhereInput
  reviewerName: StringFilter
  rating: IntFilter
  comment: StringFilter
  createdAt: DateTimeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ReviewOrderByInput {
  id: OrderDirection
  reviewerName: OrderDirection
  rating: OrderDirection
  comment: OrderDirection
  createdAt: OrderDirection
}

input ReviewUpdateInput {
  course: CourseRelateToOneForUpdateInput
  reviewerName: String
  rating: Int
  comment: String
  createdAt: DateTime
}

input ReviewUpdateArgs {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateInput!
}

input ReviewCreateInput {
  course: CourseRelateToOneForCreateInput
  reviewerName: String
  rating: Int
  comment: String
  createdAt: DateTime
}

type Currency {
  id: ID!
  name: String
  code: String
  exchangeRate: Float
}

input CurrencyWhereUniqueInput {
  id: ID
  code: String
}

input CurrencyWhereInput {
  AND: [CurrencyWhereInput!]
  OR: [CurrencyWhereInput!]
  NOT: [CurrencyWhereInput!]
  id: IDFilter
  name: StringFilter
  code: StringFilter
  exchangeRate: FloatNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input CurrencyOrderByInput {
  id: OrderDirection
  name: OrderDirection
  code: OrderDirection
  exchangeRate: OrderDirection
}

input CurrencyUpdateInput {
  name: String
  code: String
  exchangeRate: Float
}

input CurrencyUpdateArgs {
  where: CurrencyWhereUniqueInput!
  data: CurrencyUpdateInput!
}

input CurrencyCreateInput {
  name: String
  code: String
  exchangeRate: Float
}

type Category {
  id: ID!
  name: String
  description: String
  courses(where: CourseWhereInput! = {}, orderBy: [CourseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CourseWhereUniqueInput): [Course!]
  coursesCount(where: CourseWhereInput! = {}): Int
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  courses: CourseManyRelationFilter
}

input CourseManyRelationFilter {
  every: CourseWhereInput
  some: CourseWhereInput
  none: CourseWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
}

input CategoryUpdateInput {
  name: String
  description: String
  courses: CourseRelateToManyForUpdateInput
}

input CourseRelateToManyForUpdateInput {
  disconnect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  description: String
  courses: CourseRelateToManyForCreateInput
}

input CourseRelateToManyForCreateInput {
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

type Course {
  id: ID!
  title: String
  slug: String
  description: String
  content: Course_content_Document
  lessons(where: LessonWhereInput! = {}, orderBy: [LessonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LessonWhereUniqueInput): [Lesson!]
  lessonsCount(where: LessonWhereInput! = {}): Int
  reviews(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReviewWhereUniqueInput): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
  price: Float
  currency: String
  thumbnail: ImageFieldOutput
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  discountEvents(where: DiscountEventWhereInput! = {}, orderBy: [DiscountEventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DiscountEventWhereUniqueInput): [DiscountEvent!]
  discountEventsCount(where: DiscountEventWhereInput! = {}): Int
  teacher: Teacher
}

type Course_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input CourseWhereUniqueInput {
  id: ID
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  description: StringFilter
  lessons: LessonManyRelationFilter
  reviews: ReviewManyRelationFilter
  price: FloatFilter
  currency: StringFilter
  categories: CategoryManyRelationFilter
  discountEvents: DiscountEventManyRelationFilter
  teacher: TeacherWhereInput
}

input LessonManyRelationFilter {
  every: LessonWhereInput
  some: LessonWhereInput
  none: LessonWhereInput
}

input ReviewManyRelationFilter {
  every: ReviewWhereInput
  some: ReviewWhereInput
  none: ReviewWhereInput
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input DiscountEventManyRelationFilter {
  every: DiscountEventWhereInput
  some: DiscountEventWhereInput
  none: DiscountEventWhereInput
}

input CourseOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  description: OrderDirection
  price: OrderDirection
  currency: OrderDirection
}

input CourseUpdateInput {
  title: String
  slug: String
  description: String
  content: JSON
  lessons: LessonRelateToManyForUpdateInput
  reviews: ReviewRelateToManyForUpdateInput
  price: Float
  currency: String
  thumbnail: ImageFieldInput
  categories: CategoryRelateToManyForUpdateInput
  discountEvents: DiscountEventRelateToManyForUpdateInput
  teacher: TeacherRelateToOneForUpdateInput
}

input LessonRelateToManyForUpdateInput {
  disconnect: [LessonWhereUniqueInput!]
  set: [LessonWhereUniqueInput!]
  create: [LessonCreateInput!]
  connect: [LessonWhereUniqueInput!]
}

input ReviewRelateToManyForUpdateInput {
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input DiscountEventRelateToManyForUpdateInput {
  disconnect: [DiscountEventWhereUniqueInput!]
  set: [DiscountEventWhereUniqueInput!]
  create: [DiscountEventCreateInput!]
  connect: [DiscountEventWhereUniqueInput!]
}

input TeacherRelateToOneForUpdateInput {
  create: TeacherCreateInput
  connect: TeacherWhereUniqueInput
  disconnect: Boolean
}

input CourseUpdateArgs {
  where: CourseWhereUniqueInput!
  data: CourseUpdateInput!
}

input CourseCreateInput {
  title: String
  slug: String
  description: String
  content: JSON
  lessons: LessonRelateToManyForCreateInput
  reviews: ReviewRelateToManyForCreateInput
  price: Float
  currency: String
  thumbnail: ImageFieldInput
  categories: CategoryRelateToManyForCreateInput
  discountEvents: DiscountEventRelateToManyForCreateInput
  teacher: TeacherRelateToOneForCreateInput
}

input LessonRelateToManyForCreateInput {
  create: [LessonCreateInput!]
  connect: [LessonWhereUniqueInput!]
}

input ReviewRelateToManyForCreateInput {
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input DiscountEventRelateToManyForCreateInput {
  create: [DiscountEventCreateInput!]
  connect: [DiscountEventWhereUniqueInput!]
}

input TeacherRelateToOneForCreateInput {
  create: TeacherCreateInput
  connect: TeacherWhereUniqueInput
}

type DiscountEvent {
  id: ID!
  title: String
  discountPercentage: Float
  startDate: DateTime
  endDate: DateTime
  courses(where: CourseWhereInput! = {}, orderBy: [CourseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CourseWhereUniqueInput): [Course!]
  coursesCount(where: CourseWhereInput! = {}): Int
}

input DiscountEventWhereUniqueInput {
  id: ID
}

input DiscountEventWhereInput {
  AND: [DiscountEventWhereInput!]
  OR: [DiscountEventWhereInput!]
  NOT: [DiscountEventWhereInput!]
  id: IDFilter
  title: StringFilter
  discountPercentage: FloatFilter
  startDate: DateTimeFilter
  endDate: DateTimeFilter
  courses: CourseManyRelationFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input DiscountEventOrderByInput {
  id: OrderDirection
  title: OrderDirection
  discountPercentage: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
}

input DiscountEventUpdateInput {
  title: String
  discountPercentage: Float
  startDate: DateTime
  endDate: DateTime
  courses: CourseRelateToManyForUpdateInput
}

input DiscountEventUpdateArgs {
  where: DiscountEventWhereUniqueInput!
  data: DiscountEventUpdateInput!
}

input DiscountEventCreateInput {
  title: String
  discountPercentage: Float
  startDate: DateTime
  endDate: DateTime
  courses: CourseRelateToManyForCreateInput
}

type Teacher {
  id: ID!
  name: String
  email: String
  avatar: ImageFieldOutput
  bio: Teacher_bio_Document
  courses(where: CourseWhereInput! = {}, orderBy: [CourseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CourseWhereUniqueInput): [Course!]
  coursesCount(where: CourseWhereInput! = {}): Int
}

type Teacher_bio_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input TeacherWhereUniqueInput {
  id: ID
}

input TeacherWhereInput {
  AND: [TeacherWhereInput!]
  OR: [TeacherWhereInput!]
  NOT: [TeacherWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  courses: CourseManyRelationFilter
}

input TeacherOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input TeacherUpdateInput {
  name: String
  email: String
  avatar: ImageFieldInput
  bio: JSON
  courses: CourseRelateToManyForUpdateInput
}

input TeacherUpdateArgs {
  where: TeacherWhereUniqueInput!
  data: TeacherUpdateInput!
}

input TeacherCreateInput {
  name: String
  email: String
  avatar: ImageFieldInput
  bio: JSON
  courses: CourseRelateToManyForCreateInput
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createLesson(data: LessonCreateInput!): Lesson
  createLessons(data: [LessonCreateInput!]!): [Lesson]
  updateLesson(where: LessonWhereUniqueInput!, data: LessonUpdateInput!): Lesson
  updateLessons(data: [LessonUpdateArgs!]!): [Lesson]
  deleteLesson(where: LessonWhereUniqueInput!): Lesson
  deleteLessons(where: [LessonWhereUniqueInput!]!): [Lesson]
  createReview(data: ReviewCreateInput!): Review
  createReviews(data: [ReviewCreateInput!]!): [Review]
  updateReview(where: ReviewWhereUniqueInput!, data: ReviewUpdateInput!): Review
  updateReviews(data: [ReviewUpdateArgs!]!): [Review]
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteReviews(where: [ReviewWhereUniqueInput!]!): [Review]
  createCurrency(data: CurrencyCreateInput!): Currency
  createCurrencies(data: [CurrencyCreateInput!]!): [Currency]
  updateCurrency(where: CurrencyWhereUniqueInput!, data: CurrencyUpdateInput!): Currency
  updateCurrencies(data: [CurrencyUpdateArgs!]!): [Currency]
  deleteCurrency(where: CurrencyWhereUniqueInput!): Currency
  deleteCurrencies(where: [CurrencyWhereUniqueInput!]!): [Currency]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createCourse(data: CourseCreateInput!): Course
  createCourses(data: [CourseCreateInput!]!): [Course]
  updateCourse(where: CourseWhereUniqueInput!, data: CourseUpdateInput!): Course
  updateCourses(data: [CourseUpdateArgs!]!): [Course]
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteCourses(where: [CourseWhereUniqueInput!]!): [Course]
  createDiscountEvent(data: DiscountEventCreateInput!): DiscountEvent
  createDiscountEvents(data: [DiscountEventCreateInput!]!): [DiscountEvent]
  updateDiscountEvent(where: DiscountEventWhereUniqueInput!, data: DiscountEventUpdateInput!): DiscountEvent
  updateDiscountEvents(data: [DiscountEventUpdateArgs!]!): [DiscountEvent]
  deleteDiscountEvent(where: DiscountEventWhereUniqueInput!): DiscountEvent
  deleteDiscountEvents(where: [DiscountEventWhereUniqueInput!]!): [DiscountEvent]
  createTeacher(data: TeacherCreateInput!): Teacher
  createTeachers(data: [TeacherCreateInput!]!): [Teacher]
  updateTeacher(where: TeacherWhereUniqueInput!, data: TeacherUpdateInput!): Teacher
  updateTeachers(data: [TeacherUpdateArgs!]!): [Teacher]
  deleteTeacher(where: TeacherWhereUniqueInput!): Teacher
  deleteTeachers(where: [TeacherWhereUniqueInput!]!): [Teacher]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  lesson(where: LessonWhereUniqueInput!): Lesson
  lessons(where: LessonWhereInput! = {}, orderBy: [LessonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LessonWhereUniqueInput): [Lesson!]
  lessonsCount(where: LessonWhereInput! = {}): Int
  review(where: ReviewWhereUniqueInput!): Review
  reviews(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReviewWhereUniqueInput): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
  currency(where: CurrencyWhereUniqueInput!): Currency
  currencies(where: CurrencyWhereInput! = {}, orderBy: [CurrencyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CurrencyWhereUniqueInput): [Currency!]
  currenciesCount(where: CurrencyWhereInput! = {}): Int
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  course(where: CourseWhereUniqueInput!): Course
  courses(where: CourseWhereInput! = {}, orderBy: [CourseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CourseWhereUniqueInput): [Course!]
  coursesCount(where: CourseWhereInput! = {}): Int
  discountEvent(where: DiscountEventWhereUniqueInput!): DiscountEvent
  discountEvents(where: DiscountEventWhereInput! = {}, orderBy: [DiscountEventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DiscountEventWhereUniqueInput): [DiscountEvent!]
  discountEventsCount(where: DiscountEventWhereInput! = {}): Int
  teacher(where: TeacherWhereUniqueInput!): Teacher
  teachers(where: TeacherWhereInput! = {}, orderBy: [TeacherOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TeacherWhereUniqueInput): [Teacher!]
  teachersCount(where: TeacherWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
